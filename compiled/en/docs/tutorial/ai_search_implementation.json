{"title": "How-To Guide for Implementing AI Search in a React Application", "description": "This guide provides an overview of implementing an AI Search feature in a React application, detailing setup and usage examples.", "author": "Documentation Team", "ogImage": "/og-image.png", "publishDate": "2024-10-29", "modifiedDate": "2024-10-29", "keywords": ["AI", "Search", "React", "Implementation", "Guide"], "blocks": [{"id": "1", "type": "heading", "content": "1. Main Use Cases", "metadata": {"level": 1}}, {"id": "2", "type": "paragraph", "content": "The primary use cases for the AI Search component include:"}, {"id": "3", "type": "list", "content": "Displaying AI Search Interface\nHandling User Queries\nDisplaying Recommended Articles\nToggling Legacy Documentation\nError Messaging", "metadata": {"listType": "unordered"}}, {"id": "4", "type": "heading", "content": "2. Required Setup", "metadata": {"level": 1}}, {"id": "5", "type": "paragraph", "content": "Ensure you have the following dependencies installed in your project:"}, {"id": "6", "type": "list", "content": "React\nFramer Motion (for animations)\nNext.js (for routing)\nCustom components (SearchHeader, SearchBar, LegacyDocsToggle, AIResponse, RecommendedArticles)\nUtility functions (getRecommendedArticles, getSearchConfig, getAkiradocsConfig)", "metadata": {"listType": "unordered"}}, {"id": "7", "type": "heading", "content": "3. Step-by-Step Examples for Common Operations", "metadata": {"level": 1}}, {"id": "8", "type": "paragraph", "content": "Example 1: Handling User Search Queries"}, {"id": "9", "type": "code", "content": "const handleSearch = (query) =>{\n    // Logic to handle the search query\n};", "metadata": {"language": "javascript", "showLineNumbers": true}}, {"id": "10", "type": "paragraph", "content": "This function will process user input and trigger the AI search."}, {"id": "11", "type": "heading", "content": "Error Handling", "metadata": {"level": 2}}, {"id": "12", "type": "paragraph", "content": "If the AI Search feature is disabled, display an error message to the user."}, {"id": "13", "type": "code", "content": "if (!isSearchEnabled){\n    alert('AI Search feature is currently disabled.');\n}", "metadata": {"language": "javascript", "showLineNumbers": true}}, {"id": "14", "type": "heading", "content": "Conclusion", "metadata": {"level": 1}}, {"id": "15", "type": "paragraph", "content": "Implementing an AI Search feature can greatly enhance user experience by providing quick and relevant information."}]}