{"title": "File Management API Documentation", "description": "This documentation provides a technical reference for the file management API, detailing methods for creating, reading, updating, and deleting files within a Next.js application.", "author": "Documentation Team", "ogImage": "/images/file-management-api.png", "publishDate": "2023-10-29", "modifiedDate": "2023-10-29", "keywords": ["file management", "API", "Next.js", "CRUD operations"], "blocks": [{"id": "1", "type": "heading", "content": "1. Public API", "metadata": {"level": 1}}, {"id": "2", "type": "paragraph", "content": "This module provides an API for file management operations, including creating, reading, updating, and deleting files and directories. It is designed to work within a Next.js application."}, {"id": "3", "type": "heading", "content": "Method Signatures", "metadata": {"level": 2}}, {"id": "4", "type": "heading", "content": "POST(request: Request): Promise<NextResponse>", "metadata": {"level": 3}}, {"id": "5", "type": "paragraph", "content": "- **Parameters**: An instance of the `Request` object containing the JSON payload with `path` and `content`."}, {"id": "6", "type": "paragraph", "content": "- **Returns**: A `Promise` that resolves to a `NextResponse` indicating success or failure."}, {"id": "7", "type": "heading", "content": "DELETE(request: Request): Promise<NextResponse>", "metadata": {"level": 3}}, {"id": "8", "type": "paragraph", "content": "- **Parameters**: An instance of the `Request` object containing the JSON payload with `path` and `type`."}, {"id": "9", "type": "paragraph", "content": "- **Returns**: A `Promise` that resolves to a `NextResponse` indicating success or failure."}, {"id": "10", "type": "heading", "content": "GET(request: Request): Promise<NextResponse>", "metadata": {"level": 3}}, {"id": "11", "type": "paragraph", "content": "- **Parameters**: An instance of the `Request` object containing the URL with search parameters."}, {"id": "12", "type": "paragraph", "content": "- **Returns**: A `Promise` that resolves to a `NextResponse` containing the file content or an error message."}, {"id": "13", "type": "heading", "content": "PUT(request: Request): Promise<NextResponse>", "metadata": {"level": 3}}, {"id": "14", "type": "paragraph", "content": "- **Parameters**: An instance of the `Request` object containing the JSON payload with `path` and `content`."}, {"id": "15", "type": "paragraph", "content": "- **Returns**: A `Promise` that resolves to a `NextResponse` indicating success or failure."}, {"id": "16", "type": "heading", "content": "2. Configuration", "metadata": {"level": 1}}, {"id": "17", "type": "heading", "content": "Constants and Default Values", "metadata": {"level": 2}}, {"id": "18", "type": "paragraph", "content": "- **Max Retries**: The maximum number of retries for writing a file is set to `3`."}, {"id": "19", "type": "paragraph", "content": "- **Directory Structure**: Files are stored in the `compiled` directory within the project's root."}, {"id": "20", "type": "heading", "content": "3. Error Handling", "metadata": {"level": 1}}, {"id": "21", "type": "heading", "content": "Exception Classes", "metadata": {"level": 2}}, {"id": "22", "type": "paragraph", "content": "The API uses standard JavaScript error handling with `try-catch` blocks to manage exceptions."}, {"id": "23", "type": "heading", "content": "Error Scenarios", "metadata": {"level": 2}}, {"id": "24", "type": "paragraph", "content": "- **File Creation**: Errors may occur if the directory cannot be created or if writing to the file fails."}]}